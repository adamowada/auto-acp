#!/home/adam/projects/auto-acp/.venv/bin/python
import os
import re
import subprocess

from dotenv import load_dotenv
import openai


load_dotenv(".env")


# Define constants
STARTER = "Imagine you are a senior software developer. The following is the output from the command `git diff`. Respond with a 1 line git commit message for these changes verbatim:\n\n"
OPENAI_API_KEY = os.getenv("API_KEY")
OPENAI_MODEL = "gpt-3.5-turbo"
GIT_COMMANDS = {
    "INTENT_TO_ADD": ["git", "add", "-N", "."],
    "DIFF": ["git", "diff"],
    "ADD": ["git", "add", "."],
    "COMMIT": ["git", "commit", "-m"],
    "PUSH": ["git", "push"],
}


def replace_chars(text):
    # Replace line breaks with \n
    text = re.sub(r"\r?\n", r"\\n", text)
    # Replace backslashes with \\
    text = re.sub(r"\\", r"\\\\", text)
    # Replace double quotes with single quotes
    text = re.sub(r'"', r"'", text)
    return text


if __name__ == "__main__":
    try:
        # Run git commands
        subprocess.run(GIT_COMMANDS["INTENT_TO_ADD"], capture_output=True, check=True)
        diff = subprocess.run(GIT_COMMANDS["DIFF"], capture_output=True, check=True)
        diff = str(diff.stdout, "UTF-8")
        diff = replace_chars(diff)

        if not diff or len(diff) < 10:
            exit()

        # Call OpenAI API
        openai.api_key = OPENAI_API_KEY
        completion = openai.ChatCompletion.create(
            model=OPENAI_MODEL, messages=[{"role": "user", "content": STARTER + diff}]
        )

        # ACP result
        message = completion.choices[0].message["content"].strip()
        GIT_COMMANDS["COMMIT"].append(message)
        subprocess.run(GIT_COMMANDS["ADD"], capture_output=True, check=True)
        subprocess.run(GIT_COMMANDS["COMMIT"], capture_output=True, check=True)
        subprocess.run(GIT_COMMANDS["PUSH"], capture_output=True, check=True)
        print(message)
    except subprocess.CalledProcessError as err:
        raise Exception(f"Error running git command: {err}")
    except openai.error.APIError as err:
        # Handle API error here, e.g. retry or log
        raise Exception(f"OpenAI API returned an API Error: {err}")
    except openai.error.APIConnectionError as err:
        # Handle connection error here
        raise Exception(f"Failed to connect to OpenAI API: {err}")
    except openai.error.RateLimitError as err:
        # Handle rate limit error (we recommend using exponential backoff)
        raise Exception(f"OpenAI API request exceeded rate limit: {err}")
