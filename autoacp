#!/home/adamo/projects/auto-acp/.venv/bin/python
import os
import re
import subprocess

from dotenv import load_dotenv
from openai import OpenAI


load_dotenv("/home/adamo/projects/auto-acp/.env")


# Define constants
PROMPT = "Imagine you are a senior software developer. The following is the output from the command `git diff`. Respond with a well crafted git commit message for these changes verbatim:\n\n"
OPENAI_API_KEY = os.getenv("API_KEY")
client = OpenAI(api_key=OPENAI_API_KEY)
OPENAI_MODEL = "gpt-4.1-nano"
GIT_COMMANDS = {
    "ADD": ["git", "add", "."],
    "COMMIT": ["git", "commit", "-m"],
    "DIFF": ["git", "diff"],
    "INTENT_TO_ADD": ["git", "add", "-N", "."],
    "PUSH": ["git", "push"],
}


def replace_chars(text):
    """Replace special characters with escape sequences for valid JSON."""
    # Replace line breaks with \n
    text = re.sub(r"\r?\n", r"\\n", text)
    # Replace backslashes with \\
    text = re.sub(r"\\", r"\\\\", text)
    # Replace double quotes with single quotes
    text = re.sub(r'"', r"'", text)
    return text


def run_git_command(command):
    """Run a git command and return the output."""
    try:
        result = subprocess.run(command, capture_output=True, check=True)
        return str(result.stdout, "utf-8").strip()
    except subprocess.CalledProcessError as err:
        raise Exception(f"Error running git command: {err}")


def main():
    """
    Run the main logic of the script.

    This function runs the `git diff` command, calls the OpenAI API to generate a commit message,
    and executes the necessary `git` commands to add, commit and push the changes.

    If the `git diff` command returns an empty or very short string, no commit is made.
    """
    # Run git commands
    run_git_command(GIT_COMMANDS["INTENT_TO_ADD"])
    diff = run_git_command(GIT_COMMANDS["DIFF"])
    diff = replace_chars(diff)

    if not diff or len(diff) < 5:
        return

    # Call OpenAI API
    try:
        response = client.responses.create(
            model=OPENAI_MODEL,
            input=[
                {
                    "role": "system",
                    "content": [
                        {
                            "type": "input_text",
                            "text": "A great git commit message clearly communicates the purpose and context of the commit to any future reader, whether that's another developer or your future self. It should succinctly summarize what changes were made, why they were necessary, and any critical context or side effects. The best commit messages balance brevity and clarity, often starting with a concise subject line followed by an optional detailed explanation if needed. I prefer commit messages written in the imperative mood (\"Fix bug\", \"Add feature\") because it clearly states the action taken and reads naturally in git logs or generated changelogs. Thoughtful commit messages help teams understand project history, simplify debugging, facilitate code reviews, and improve overall maintainability.\n\n**Quick Tips for Great Git Commit Messages:**\n\n- **Be concise yet descriptive:** Keep the summary short (50 characters or fewer) but clearly describe what the commit achieves.\n- **Use imperative mood:** Write commit messages as commands (\"Update README\", \"Fix login bug\").\n- **Explain the why:** When necessary, provide context or reasoning in a detailed commit body after a blank line.\n- **Separate concerns:** Make each commit about one logical change or fix; avoid bundling unrelated changes.\n- **Reference related issues:** Link commits to relevant issue tracker IDs (e.g., \"#42\") to enhance traceability.\n- **Proofread before committing:** Check grammar, spelling, and clarity to ensure readability for future readers."
                        }
                    ]
                },
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "input_text",
                            "text": f"Imagine you are a senior software developer. The following is the output from the command `git diff`. \n\n```bash\n{diff}\n```\n\nRespond with a well crafted git commit message. The message must be 50 characters or shorter. Respond with a verbatim commit message, with the intent that your response will be copied and pasted as is. Do not add additional commentary."
                        }
                    ]
                }
            ],
            text={
                "format": {
                "type": "text"
                }
            },
            reasoning={},
            tools=[],
            temperature=1,
            max_output_tokens=2048,
            top_p=1,
            store=True
        )
    except Exception as e:
        print(f"An error occurred: {e}")

    commit_message = response.output[0].content[0].text.strip()

    # ACP
    run_git_command(GIT_COMMANDS["ADD"])
    run_git_command(GIT_COMMANDS["COMMIT"] + [commit_message])
    run_git_command(GIT_COMMANDS["PUSH"])

    print(commit_message)


if __name__ == "__main__":
    main()
